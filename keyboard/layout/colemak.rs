use keyboard::key::*;

mod keyboard {
  extern mod key;
}

static translateToChar:[char, ..173] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '`', '1', '2', '3', '4', '5', '6', '7',
  '8', '9', '0', '-', '=', '\x00', '\x00', '\x00', '\x00', '\x00',
  '/', '*', '-', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', 'q', 'w', 'f', 'p', 'g',
  'j', 'l', 'u', 'y', ';', '[', ']', '\\', '\x00', '\x00',
  '\x00', '7', '8', '9', '+', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', 'a', 'r', 's',
  't', 'd', 'h', 'n', 'e', 'i', 'o', ''', '\x00', '4',
  '5', '6', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', 'z',
  'x', 'c', 'v', 'b', 'k', 'm', ',', '.', '/', '\x00',
  '\x00', '\x00', '1', '2', '3', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', ' ', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '0', '.'
];

static translateToCharShift:[char, ..173] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '~', '!', '@', '#', '$', '%', '^', '&',
  '*', '(', ')', '_', '+', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', 'Q', 'W', 'F', 'P', 'G',
  'J', 'L', 'U', 'Y', ':', '{', '}', '|', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', 'A', 'R', 'S',
  'T', 'D', 'H', 'N', 'E', 'I', 'O', '"', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', 'Z',
  'X', 'C', 'V', 'B', 'K', 'M', '<', '>', '?', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', ' ', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00'
];

pub fn translate(key: Key, dead: u32) -> u32 {
  if (!(key.shift() ^ key.capsLock) && !key.alt() && !key.control()) {
    if (dead != 0) {
      // XXX: use unicode combine
      translateToChar[key.code as uint] as u32
    }
    else {
      translateToChar[key.code as uint] as u32
    }
  }
  else if ((key.shift() || key.capsLock) && !key.alt() && !key.control()) {
    if (dead != 0) {
      // XXX: use unicode combine
      translateToCharShift[key.code as uint] as u32
    }
    else {
      translateToCharShift[key.code as uint] as u32
    }
  }
  else {
    0
  }
}
