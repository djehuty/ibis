use keyboard::key::*;

mod keyboard {
  extern mod key;
}

static translateToChar:[char, ..173] = [
  '\x00', '\x00', '\t', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\n', ' ',
  '\u00e0', '&', '\u00e9', '"', '\'', '(', '\u00a7', '\u00e8', '!', '\u00e7', '\x00', '\x00', '\u00b2', '\u00f9', ';', ':',
  '=', '\u00b5', '\x00', '$', 'm', ')', '-',
  'q', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', ',',
  'n', 'o', 'p', 'a', 'r', 's', 't', 'u', 'v', 'z', 'x', 'y', 'w',
  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '-', '*', '/', '\n',
  '.', '<'
];

static translateToCharShift:[char, ..173] = [
  '\x00', '\x00', '\t', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\n', ' ',
  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '\x00', '\x00', '\u00b3', '%', '.', '/',
  '\u00a3', '+', '\x00', '*', 'M', '\u00b0', '_',
  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '-', '*', '/', '\n',
  '.', '>'
];

static translateToCharAlt:[char, ..173] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\n', ' ',
  '}', '|', '@', '#', '{', '[', '^', '\x00', '\x00', '{', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '[', ']', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\u20ac', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '-', '*', '/', '\n',
  '.', '\\'
];

static template:[char, ..173] = [
  '\x00', /*Invalid,*/
  '\x00', /*Backspace,*/
  '\x00', /*Tab,*/
  '\x00', /*Pause,*/
  '\x00', /*Escape,*/
  '\x00', /*PageUp,*/
  '\x00', /*PageDown,*/
  '\x00', /*End,*/
  '\x00', /*Home,*/
  '\x00', /*Left,*/
  '\x00', /*Right,*/
  '\x00', /*Up,*/
  '\x00', /*Down,*/
  '\x00', /*Insert,*/
  '\x00', /*Delete,*/
  '\x00', /*NumLock,*/
  '\x00', /*ScrollLock,*/
  '\x00', /*CapsLock,*/
  '\x00', /*LeftShift,*/
  '\x00', /*RightShift,*/
  '\x00', /*LeftControl,*/
  '\x00', /*RightControl,*/
  '\x00', /*LeftAlt,*/
  '\x00', /*RightAlt,*/
  '\x00', /*F1,*/
  '\x00', /*F2,*/
  '\x00', /*F3,*/
  '\x00', /*F4,*/
  '\x00', /*F5,*/
  '\x00', /*F6,*/
  '\x00', /*F7,*/
  '\x00', /*F8,*/
  '\x00', /*F9,*/
  '\x00', /*F10,*/
  '\x00', /*F11,*/
  '\x00', /*F12,*/
  '\x00', /*F13,*/
  '\x00', /*F14,*/
  '\x00', /*F15,*/
  '\x00', /*F16,*/
  '\x00', /*Return,*/
  '\x00', /*Space,*/
  '\x00', /*Zero,*/
  '\x00', /*One,*/
  '\x00', /*Two,*/
  '\x00', /*Three,*/
  '\x00', /*Four,*/
  '\x00', /*Five,*/
  '\x00', /*Six,*/
  '\x00', /*Seven,*/
  '\x00', /*Eight,*/
  '\x00', /*Nine,*/
  '\x00', /*PrintScreen,*/
  '\x00', /*SysRq,*/
  '\x00', /*SingleQuote,*/
  '\x00', /*Apostrophe,*/
  '\x00', /*Comma,*/
  '\x00', /*Period,*/
  '\x00', /*Foreslash,*/
  '\x00', /*Backslash,*/
  '\x00', /*LeftBracket,*/
  '\x00', /*RightBracket,*/
  '\x00', /*Semicolon,*/
  '\x00', /*Minus,*/
  '\x00', /*Equals,*/
  '\x00', /*A,*/
  '\x00', /*B,*/
  '\x00', /*C,*/
  '\x00', /*D,*/
  '\x00', /*E,*/
  '\x00', /*F,*/
  '\x00', /*G,*/
  '\x00', /*H,*/
  '\x00', /*I,*/
  '\x00', /*J,*/
  '\x00', /*K,*/
  '\x00', /*L,*/
  '\x00', /*M,*/
  '\x00', /*N,*/
  '\x00', /*O,*/
  '\x00', /*P,*/
  '\x00', /*Q,*/
  '\x00', /*R,*/
  '\x00', /*S,*/
  '\x00', /*T,*/
  '\x00', /*U,*/
  '\x00', /*V,*/
  '\x00', /*W,*/
  '\x00', /*X,*/
  '\x00', /*Y,*/
  '\x00', /*Z,*/
  '\x00', /*KeypadZero,*/
  '\x00', /*KeypadOne,*/
  '\x00', /*KeypadTwo,*/
  '\x00', /*KeypadThree,*/
  '\x00', /*KeypadFour,*/
  '\x00', /*KeypadFive,*/
  '\x00', /*KeypadSix,*/
  '\x00', /*KeypadSeven,*/
  '\x00', /*KeypadEight,*/
  '\x00', /*KeypadNine,*/
  '\x00', /*KeypadPlus,*/
  '\x00', /*KeypadMinus,*/
  '\x00', /*KeypadAsterisk,*/
  '\x00', /*KeypadForeslash,*/
  '\x00', /*KeypadReturn,*/
  '\x00', /*KeypadPeriod,*/
  '\x00' /*International,*/
];

static translateDeadAlt:[char, ..173] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\u0300', '\u0308', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'
];

static translateDeadShift:[char, ..173] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\u0301', '\x00', '\x00', '\u0303', '\x00', '\u0308', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'
];

static translateDead:[char, ..173] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\u0302', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'
];

pub fn translate(key: Key, dead: u32) -> u32 {
  if (!(key.shift() ^ key.capsLock) && !key.alt() && !key.control()) {
    if (translateDead[key.code as uint] != '\x00') {
      translateDead[key.code as uint] as u32
    }
    else if (dead != 0) {
      // XXX: use unicode combine
      translateToChar[key.code as uint] as u32
    }
    else {
      translateToChar[key.code as uint] as u32
    }
  }
  else if ((key.shift() || key.capsLock) && !key.alt() && !key.control()) {
    if (translateDeadShift[key.code as uint] != '\x00') {
      translateDeadShift[key.code as uint] as u32
    }
    else if (dead != 0) {
      // XXX: use unicode combine
      translateToCharShift[key.code as uint] as u32
    }
    else {
      translateToCharShift[key.code as uint] as u32
    }
  }
  else if (!key.shift() && key.rightAlt && !key.control()) {
    if (translateDeadAlt[key.code as uint] != '\x00') {
      translateDeadAlt[key.code as uint] as u32
    }
    else if (dead != 0) {
      // XXX: use unicode combine
      translateToCharAlt[key.code as uint] as u32
    }
    else {
      translateToCharAlt[key.code as uint] as u32
    }
  }
  else {
    0
  }
}
