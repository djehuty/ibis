#[link(name = "keyboard-layout-canadian_multilingual", vers = "1.0", package_id = "keyboard-layout-canadian_multilingual")];

#[feature(globs)];
use keyboard::key::*;

mod keyboard {
  extern mod key = "keyboard-key";
}

static translateToChar:[char, ..108] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', ' ', '0', '1', '2', '3', '4', '5', '6', '7',
  '8', '9', '\x00', '\x00', '/', '\u00e8', ',', '.', '\u00e9', '\u00e0',
  '\x00', '\u00e7', ';', '-', '=', 'a', 'b', 'c', 'd', 'e',
  'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
  'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
  'z', '0', '1', '2', '3', '4', '5', '6', '7', '8',
  '9', '+', '-', '*', '/', '\x00', '.', '\u00f9'
];

static translateToCharShift:[char, ..108] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', ' ', ')', '!', '@', '#', '$', '%', '?', '&',
  '*', '(', '\x00', '\x00', '\\', '\u00c8', '\'', '"', '\u00c9', '\u00c0',
  '\x00', '\u00c7', ':', '_', '+', 'A', 'B', 'C', 'D', 'E',
  'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
  'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',
  'Z', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\u00d9'
];

static translateToCharAlt:[char, ..108] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\u00a0', ']', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '{',
  '}', '[', '\x00', '\x00', '|', '\x00', '<', '>', '\x00', '\x00',
  '\x00', '\x00', '\u00b0', '\x00', '\u00af', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\u00bb', '\x00',
  '\u00ab', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'
];

static translateToCharControl:[char, ..108] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\u00b9', '\u00b2', '\u00b3', '\u00bc', '\u00bd', '\u00be', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\u2015', '\x00', '\x00', '\x00',
  '\x00', '~', '\x00', '\x00', '\x00', '\u00e6', '\u201d', '\u00a2', '\u00f0', '\u0153',
  '\x00', '\u014b', '\u0127', '\u2192', '\u0133', '\u0138', '\u0140', '\u00b5', '\u0149', '\u00f8',
  '\u00fe', '\x00', '\u00b6', '\u00df', '\u0167', '\u2193', '\u201c', '\u0142', '\x00', '\u2190',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'
];

static translateToCharShiftControl:[char, ..108] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\u00a1', '\x00', '\u00a3', '\u00a4', '\u215c', '\u215d', '\u215e',
  '\u2122', '\u00b1', '\x00', '\x00', '\u00ad', '\x00', '\u00d7', '\u00f7', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\u00bf', '\x00', '\u00c6', '\u2019', '\u00a9', '\u00d0', '\u0152',
  '\u00aa', '\u014a', '\u0126', '\u0131', '\u0132', '\x00', '\u013f', '\u00ba', '\u266a', '\u00d8',
  '\u00de', '\u2126', '\u00ae', '\u00a7', '\u0166', '\u2191', '\u2018', '\u0141', '\x00', '\u00a5',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\u00a6'
];

static translateDead:[char, ..108] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\u0302', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'
];

static translateDeadShift:[char, ..108] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\u0308', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'
];

static translateDeadAlt:[char, ..108] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\u0300', '\u0303', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'
];


static translateDeadControl:[char, ..108] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\u02d9', '\x00', '\x00', '\x00', '\x00', '\u00b4',
  '\x00', '\u00b8', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'
];

static translateDeadShiftControl:[char, ..108] = [
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\u030c', '\x00', '\x00', '\u0307', '\u0306', '\u030a', '\u0304', '\u030b',
  '\x00', '\u0328', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00',
  '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00'
];

pub fn translate(key: Key, dead: u32) -> u32 {
  if (!(key.shift() ^ key.capsLock) && !key.alt() && !key.control()) {
    if (translateDead[key.code as uint] != '\x00') {
      translateDead[key.code as uint] as u32
    }
    else if (dead != 0) {
      // XXX: use unicode combine
      translateToChar[key.code as uint] as u32
    }
    else {
      translateToChar[key.code as uint] as u32
    }
  }
  else if ((key.shift() || key.capsLock) && !key.alt() && !key.control()) {
    if (translateDeadShift[key.code as uint] != '\x00') {
      translateDeadShift[key.code as uint] as u32
    }
    else if (dead != 0) {
      // XXX: use unicode combine
      translateToCharShift[key.code as uint] as u32
    }
    else {
      translateToCharShift[key.code as uint] as u32
    }
  }
  else if (!key.shift() && key.rightAlt && !key.control()) {
    if (translateDeadAlt[key.code as uint] != '\x00') {
      translateDeadAlt[key.code as uint] as u32
    }
    else if (dead != 0) {
      // XXX: use unicode combine
      translateToCharAlt[key.code as uint] as u32
    }
    else {
      translateToCharAlt[key.code as uint] as u32
    }
  }
  else if (!key.shift() && !key.alt() && key.rightControl && !key.leftControl) {
    if (translateDeadControl[key.code as uint] != '\x00') {
      translateDeadControl[key.code as uint] as u32
    }
    else if (dead != 0) {
      // XXX: use unicode combine
      translateToCharControl[key.code as uint] as u32
    }
    else {
      translateToCharControl[key.code as uint] as u32
    }
  }
  else if (key.shift() && !key.alt() && key.rightControl && !key.leftControl) {
    if (translateDeadShiftControl[key.code as uint] != '\x00') {
      translateDeadShiftControl[key.code as uint] as u32
    }
    else if (dead != 0) {
      // XXX: use unicode combine
      translateToCharShiftControl[key.code as uint] as u32
    }
    else {
      translateToCharShiftControl[key.code as uint] as u32
    }
  }
  else {
    0
  }
}
